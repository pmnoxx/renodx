// Generated HLSL code from ASM instructions
//
#include "./asm_library.hlsl"

//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   sampler2D $CloudTexture;
//   sampler1D $ColorLookup;
//   sampler2D $GlowTexture;
//   sampler2D $InputTexture;
//   sampler2D $MaskTexture;
//   
//   struct
//   {
//       float4 GlowColorMult;
//       float4 VignetteAndNoiseParams;
//       float4 LocalContrastParams;
//       float4 LookupExcludeColor0;
//       float4 LookupExcludeColor1;
//       float4 LookupExcludeFalloff;
//       float4 SharpenParams;
//       float4 LayerCloudColor;
//       float4 LowSpecColorMultiplier;
//       float4 NonGlowColorMult;
//       float4 CustomParams[4];
//
//   } $PerDrawCall;
//   
//   sampler1D $ToneMappingLookup;
//
//
// Registers:
//
//   Name               Reg   Size
//   ------------------ ----- ----
//   $PerDrawCall       c26     14
//   $InputTexture      s0       1
//   $GlowTexture       s1       1
//   $ColorLookup       s3       1
//   $ToneMappingLookup s4       1
//   $CloudTexture      s5       1
//   $MaskTexture       s6       1
//

// Constant registers
float4 c0: register(c0);
float4 c1: register(c1);
float4 c26: register(c26);
float4 c27: register(c27);
float4 c28: register(c28);
float4 c29: register(c29);
float4 c30: register(c30);
float4 c31: register(c31);
float4 c32: register(c32);
float4 c35: register(c35);
float4 c36: register(c36);
float4 c37: register(c37);
float4 c38: register(c38);
float4 c39: register(c39);

// Sampler registers
sampler2D s0: register(s0);
sampler2D s1: register(s1);
sampler2D s3: register(s3);
sampler2D s4: register(s4);
sampler2D s5: register(s5);
sampler2D s6: register(s6);

float4 main(
    float4 v0: TEXCOORD,
    float2 v1: TEXCOORD1,
    float3 v2: TEXCOORD2,
    float2 v3: TEXCOORD3,
    float2 v4: TEXCOORD4
) : COLOR
{
    float4 oC0;  // Output color register

    // Temporary registers
    float4 r0 = 0, r1 = 0, r2 = 0, r3 = 0;

    //  0 0x000003C4:: add r0.xy, c32, v0
    r0.xy = (c32 + v0).xy;

    //  1 0x000003D4:: texld_pp r0, r0, s0
    r0 = tex2D(s0, r0);

    //  1 0x000003E4:: texld_pp r1, v0, s0
    r1 = tex2D(s0, v0);

    //  1 0x000003F4:: lrp_pp r2.xyz, c32.z, r0, r1
    r2.xyz = (__asm_lerp(c32.z, r0, r1)).xyz;

    //  2 0x00000408:: mul_pp r0.xyz, r2, c32.w
    r0.xyz = (__asm_mul_pp(r2, c32.w)).xyz;

    //  3 0x00000418:: mul_pp r0.xyz, r0, c0.x
    r0.xyz = (__asm_mul_pp(r0, c0.x)).xyz;

    //  4 0x00000428:: texld_pp r1, r0.x, s4
    r1 = tex2D(s4, r0.x);

    //  4 0x00000438:: texld_pp r2, r0.y, s4
    r2 = tex2D(s4, r0.y);

    //  4 0x00000448:: texld_pp r0, r0.z, s4
    r0 = tex2D(s4, r0.z);

    //  4 0x00000458:: mov_pp r1.z, r0.z
    r1.z = __asm_mov_pp(r0.z);

    //  5 0x00000464:: mov_pp r1.y, r2.y
    r1.y = __asm_mov_pp(r2.y);

    //  6 0x00000470:: texld_pp r0, v0.zwzw, s1
    r0 = tex2D(s1, v0.zwzw);

    //  6 0x00000480:: max_pp r1.w, r0.w, c28.y
    r1.w = __asm_max_pp(r0.w, c28.y);

    //  7 0x00000490:: mul_pp r0.xyz, r0, c26
    r0.xyz = (__asm_mul_pp(r0, c26)).xyz;

    //  8 0x000004A0:: mul r0.xyz, r0, c0.y
    r0.xyz = (__asm_mul(r0, c0.y)).xyz;

    //  9 0x000004B0:: min_pp r0.w, c28.z, r1.w
    r0.w = __asm_min_pp(c28.z, r1.w);

    // 10 0x000004C0:: lrp_pp r2.xyz, c28.x, r1, r0.w
    r2.xyz = (__asm_lerp(c28.x, r1, r0.w)).xyz;

    // 11 0x000004D4:: mad_sat_pp r0.xyz, r2, c35, r0
    r0.xyz = (r2 * c35 + r0).xyz;

    // 12 0x000004E8:: rsq_pp r0.w, r0.x
    r0.w = __asm_rsq_pp(r0.x);

    // 13 0x000004F4:: rcp_pp r1.x, r0.w
    r1.x = __asm_rcp_pp(r0.w);

    // 14 0x00000500:: rsq_pp r0.w, r0.y
    r0.w = __asm_rsq_pp(r0.y);

    // 15 0x0000050C:: rcp_pp r1.y, r0.w
    r1.y = __asm_rcp_pp(r0.w);

    // 16 0x00000518:: rsq_pp r0.w, r0.z
    r0.w = __asm_rsq_pp(r0.z);

    // 17 0x00000524:: rcp_pp r1.z, r0.w
    r1.z = __asm_rcp_pp(r0.w);

    // 18 0x00000530:: add_pp r2.xyz, -, r1, c29
    r2.xyz = (-r1 + c29).xyz;

    // 19 0x00000540:: dp3_pp r2.x, r2, r2
    r2.x = (dot(r2, r2)).x;

    // 20 0x00000550:: add_pp r3.xyz, -, r1, c30
    r3.xyz = (-r1 + c30).xyz;

    // 21 0x00000560:: dp3_sat_pp r0.w, r1, c1
    r0.w = (dot(r1, c1)).x;

    // 22 0x00000570:: texld_pp r1, r0.w, s3
    r1 = tex2D(s3, r0.w);

    // 22 0x00000580:: dp3_pp r2.y, r3, r3
    r2.y = (dot(r3, r3)).x;

    // 23 0x00000590:: mad_sat_pp r2.xy, r2, c31, c31.zwzw
    r2.xy = (r2 * c31 + c31.zwzw).xy;

    // 24 0x000005A4:: mul_pp r0.w, r1.w, r2.x
    r0.w = __asm_mul_pp(r1.w, r2.x);

    // 25 0x000005B4:: mul_sat_pp r0.w, r2.y, r0.w
    r0.w = saturate(r2.y * r0.w);

    // 26 0x000005C4:: lrp_pp r2.xyz, r0.w, r1, r0
    r2.xyz = (__asm_lerp(r0.w, r1, r0)).xyz;

    // 27 0x000005D8:: dp3_pp r0.x, r2, c1
    r0.x = (dot(r2, c1)).x;

    // 28 0x000005E8:: lrp_pp r1.xyz, c27.z, r2, r0.x
    r1.xyz = (__asm_lerp(c27.z, r2, r0.x)).xyz;

    // 29 0x000005FC:: add_pp r0.xyz, r1, r1
    r0.xyz = (r1 + r1).xyz;

    // 30 0x0000060C:: log_pp r1.x, r0.x
    r1.x = __asm_log_pp(r0.x);

    // 31 0x00000618:: log_pp r1.y, r0.y
    r1.y = __asm_log_pp(r0.y);

    // 32 0x00000624:: log_pp r1.z, r0.z
    r1.z = __asm_log_pp(r0.z);

    // 33 0x00000630:: mul_pp r0.xyz, r1, c27.w
    r0.xyz = (__asm_mul_pp(r1, c27.w)).xyz;

    // 34 0x00000640:: exp_pp r1.x, r0.x
    r1.x = __asm_exp_pp(r0.x);

    // 35 0x0000064C:: exp_pp r1.y, r0.y
    r1.y = __asm_exp_pp(r0.y);

    // 36 0x00000658:: exp_pp r1.z, r0.z
    r1.z = __asm_exp_pp(r0.z);

    // 37 0x00000664:: mul_sat_pp r0.xyz, r1, c0.y
    r0.xyz = (saturate(r1 * c0.y)).xyz;

    // 38 0x00000674:: dp3_pp r0.w, r0, c1
    r0.w = (dot(r0, c1)).x;

    // 39 0x00000684:: add r1.x, r0.w, -, c37.x
    r1.x = r0.w + -c37.x;

    // 40 0x00000694:: add r1.y, -, r0.w, c37.z
    r1.y = -r0.w + c37.z;

    // 41 0x000006A4:: add r0.w, -, r0.w, c36.x
    r0.w = -r0.w + c36.x;

    // 42 0x000006B4:: mul_sat_pp r0.w, r0.w, c36.z
    r0.w = saturate(r0.w * c36.z);

    // 43 0x000006C4:: mul_sat_pp r1.xy, r1, c37.ywzw
    r1.xy = (saturate(r1 * c37.ywzw)).xy;

    // 44 0x000006D4:: mul_pp r1.x, r1.y, r1.x
    r1.x = __asm_mul_pp(r1.y, r1.x);

    // 45 0x000006E4:: mul_sat r1.x, r1.x, c36.y
    r1.x = saturate(r1.x * c36.y);

    // 46 0x000006F4:: texld_pp r2, v0, s6
    r2 = tex2D(s6, v0);

    // 46 0x00000704:: add_pp r1.y, -, r2.x, c0.z
    r1.y = -r2.x + c0.z;

    // 47 0x00000714:: mul r1.x, r1.y, r1.x
    r1.x = __asm_mul(r1.y, r1.x);

    // 48 0x00000724:: texld_pp r2, v3, s5
    r2 = tex2D(s5, v3);

    // 48 0x00000734:: texld_pp r3, v4, s5
    r3 = tex2D(s5, v4);

    // 48 0x00000744:: lrp_pp r1.yz, c38.x, r2.xxww, r3.xxww
    r1.yz = (__asm_lerp(c38.x, r2.xxww, r3.xxww)).xy;

    // 49 0x00000758:: lrp_pp r2.x, r0.w, r1.z, r1.y
    r2.x = __asm_lerp(r0.w, r1.z, r1.y);

    // 50 0x0000076C:: lrp_pp r3.xyz, r1.x, r2.x, r0
    r3.xyz = (__asm_lerp(r1.x, r2.x, r0)).xyz;

    // 51 0x00000780:: mul_pp r0.xyz, r3, v2
    r0.xyz = (__asm_mul_pp(r3, v2)).xyz;

    // 52 0x00000790:: dp2add_pp r0.w, v1, v1, c39.x
    r0.w = dot(v1, v1) + c39.x;

    // 54 0x000007A4:: mad_sat_pp r0.w, r0.w, c27.x, c27.y
    r0.w = r0.w * c27.x + c27.y;

    // 55 0x000007B8:: mul_pp r0.w, r0.w, r0.w
    r0.w = __asm_mul_pp(r0.w, r0.w);

    // 56 0x000007C8:: mul_pp r0.xyz, r0.w, r0
    r0.xyz = (__asm_mul_pp(r0.w, r0)).xyz;

    // 57 0x000007D8:: dp3_pp oC0.w, r0, c1
    oC0.w = (dot(r0, c1)).x;

    // approximately 69 instruction slots used (10 texture, 59 arithmetic)
    // 58 0x000007E8:: mov_pp oC0.xyz, r0
    oC0.xyz = (r0).xyz;

    return oC0;  // Return the final result
}