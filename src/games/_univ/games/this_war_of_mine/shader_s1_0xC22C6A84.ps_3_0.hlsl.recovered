// Generated HLSL code from ASM instructions
//
// #pragma target ps_3_0

// Include helper functions
#include "./asm_library.hlsl"

//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   sampler2D $CloudTexture;
//   sampler1D $ColorLookup;
//   sampler2D $GlowTexture;
//   sampler2D $InputTexture;
//   sampler2D $MaskTexture;
//   
//   struct
//   {
//       float4 GlowColorMult;
//       float4 VignetteAndNoiseParams;
//       float4 LocalContrastParams;
//       float4 LookupExcludeColor0;
//       float4 LookupExcludeColor1;
//       float4 LookupExcludeFalloff;
//       float4 SharpenParams;
//       float4 LayerCloudColor;
//       float4 LowSpecColorMultiplier;
//       float4 NonGlowColorMult;
//       float4 CustomParams[4];
//
//   } $PerDrawCall;
//   
//   sampler1D $ToneMappingLookup;
//
//
// Registers:
//
//   Name               Reg   Size
//   ------------------ ----- ----
//   $PerDrawCall       c26     14
//   $InputTexture      s0       1
//   $GlowTexture       s1       1
//   $ColorLookup       s3       1
//   $ToneMappingLookup s4       1
//   $CloudTexture      s5       1
//   $MaskTexture       s6       1
//

// Constant registers
float4 GlowColorMult: register(c26);
float4 VignetteAndNoiseParams: register(c27);
float4 LocalContrastParams: register(c28);
float4 LookupExcludeColor0: register(c29);
float4 LookupExcludeColor1: register(c30);
float4 LookupExcludeFalloff: register(c31);
float4 SharpenParams: register(c32);
float4 LayerCloudColor: register(c35);
float4 LowSpecColorMultiplier: register(c36);
float4 NonGlowColorMult: register(c37);
float4 CustomParams0: register(c38);
float4 CustomParams1: register(c39);

// Sampler registers
sampler2D InputTexture: register(s0);
sampler2D GlowTexture: register(s1);
sampler2D ColorLookup: register(s3);
sampler2D ToneMappingLookup: register(s4);
sampler2D CloudTexture: register(s5);
sampler2D MaskTexture: register(s6);

float4 main(
    float4 v0: TEXCOORD,
    float2 v1: TEXCOORD1,
    float3 v2: TEXCOORD2,
    float2 v3: TEXCOORD3,
    float2 v4: TEXCOORD4
) : COLOR
{
    float4 oC0;  // Output color register

    // Constant definitions from def instructions
    float4 c0 = float4(0.25, 0.5, 1, 0);
    float4 c1 = float4(0.212599993, 0.715200007, 0.0722000003, 0);

    // Temporary registers
    float4 r0 = 0, r1 = 0, r2 = 0, r3 = 0;

    //  0 0x000003C4:: add r0.xy, c32, v0
    // sig: float2 = float4 + float4
    r0.xy = (SharpenParams + v0).xy;

    //  1 0x000003D4:: texld_pp r0, r0, s0
    // sig: float4 = tex2D(sampler2D, float2)
    r0 = tex2D(InputTexture, r0.xy);

    //  1 0x000003E4:: texld_pp r1, v0, s0
    // sig: float4 = tex2D(sampler2D, float2)
    r1 = tex2D(InputTexture, v0.xy);

    //  1 0x000003F4:: lrp_pp r2.xyz, c32.z, r0, r1
    // sig: float3 = __asm_lerp(float1, float4, float4)
    r2.xyz = (__asm_lerp(SharpenParams.z, r0, r1)).xyz;

    //  2 0x00000408:: mul_pp r0.xyz, r2, c32.w
    // sig: float3 = float4 * float1
    r0.xyz = (r2 * SharpenParams.w).xyz;

    //  3 0x00000418:: mul_pp r0.xyz, r0, c0.x
    // sig: float3 = float4 * float1
    r0.xyz = (r0 * c0.x).xyz;

    //  4 0x00000428:: texld_pp r1, r0.x, s4
    // sig: float4 = tex1D(sampler1D, float1)
    r1 = tex2D(ToneMappingLookup, r0.x);

    //  4 0x00000438:: texld_pp r2, r0.y, s4
    // sig: float4 = tex1D(sampler1D, float1)
    r2 = tex2D(ToneMappingLookup, r0.y);

    //  4 0x00000448:: texld_pp r0, r0.z, s4
    // sig: float4 = tex1D(sampler1D, float1)
    r0 = tex2D(ToneMappingLookup, r0.z);

    //  4 0x00000458:: mov_pp r1.z, r0.z
    // sig: half1 = float1
    r1.z = r0.z;

    //  5 0x00000464:: mov_pp r1.y, r2.y
    // sig: half1 = float1
    r1.y = r2.y;

    //  6 0x00000470:: texld_pp r0, v0.zwzw, s1
    // sig: float4 = tex2D(sampler2D, float2)
    r0 = tex2D(GlowTexture, v0.zw);

    //  6 0x00000480:: max_pp r1.w, r0.w, c28.y
    // sig: float1 = max(float1)
    r1.w = max(r0.w, LocalContrastParams.y);

    //  7 0x00000490:: mul_pp r0.xyz, r0, c26
    // sig: float3 = float4 * float4
    r0.xyz = (r0 * GlowColorMult).xyz;

    //  8 0x000004A0:: mul r0.xyz, r0, c0.y
    // sig: float3 = float4 * float1
    r0.xyz = (r0 * c0.y).xyz;

    //  9 0x000004B0:: min_pp r0.w, c28.z, r1.w
    // sig: float1 = min(float1)
    r0.w = min(LocalContrastParams.z, r1.w);

    // 10 0x000004C0:: lrp_pp r2.xyz, c28.x, r1, r0.w
    // sig: float3 = __asm_lerp(float1, float4, float1)
    r2.xyz = (__asm_lerp(LocalContrastParams.x, r1, r0.w)).xyz;

    // 11 0x000004D4:: mad_sat_pp r0.xyz, r2, c35, r0
    // sig: float3 = mad_sat(float3, float1, float3)
    r0.xyz = (saturate(r2 * LayerCloudColor + r0)).xyz;

    // 12 0x000004E8:: rsq_pp r0.w, r0.x
    // sig: float1 = rsq(float1)
    r0.w = rsqrt(r0.x);

    // 13 0x000004F4:: rcp_pp r1.x, r0.w
    // sig: float1 = rcp(float1)
    r1.x = rcp(r0.w);

    // 14 0x00000500:: rsq_pp r0.w, r0.y
    // sig: float1 = rsq(float1)
    r0.w = rsqrt(r0.y);

    // 15 0x0000050C:: rcp_pp r1.y, r0.w
    // sig: float1 = rcp(float1)
    r1.y = rcp(r0.w);

    // 16 0x00000518:: rsq_pp r0.w, r0.z
    // sig: float1 = rsq(float1)
    r0.w = rsqrt(r0.z);

    // 17 0x00000524:: rcp_pp r1.z, r0.w
    // sig: float1 = rcp(float1)
    r1.z = rcp(r0.w);

    // 18 0x00000530:: add_pp r2.xyz, -, r1, c29
    // sig: float3 = float4 + float4
    r2.xyz = (-r1 + LookupExcludeColor0).xyz;

    // 19 0x00000540:: dp3_pp r2.x, r2, r2
    // sig: float1 = dp3(float4)
    r2.x = dot(r2, r2);

    // 20 0x00000550:: add_pp r3.xyz, -, r1, c30
    // sig: float3 = float4 + float4
    r3.xyz = (-r1 + LookupExcludeColor1).xyz;

    // 21 0x00000560:: dp3_sat_pp r0.w, r1, c1
    // sig: float1 = dp3_sat(float4, float4)
    r0.w = saturate(dot(r1, c1));

    // 22 0x00000570:: texld_pp r1, r0.w, s3
    // sig: float4 = tex1D(sampler1D, float1)
    r1 = tex2D(ColorLookup, r0.w);

    // 22 0x00000580:: dp3_pp r2.y, r3, r3
    // sig: float1 = dp3(float4)
    r2.y = dot(r3, r3);

    // 23 0x00000590:: mad_sat_pp r2.xy, r2, c31, c31.zwzw
    // sig: float2 = mad_sat(float2, float1, float2)
    r2.xy = (saturate(r2 * LookupExcludeFalloff + LookupExcludeFalloff.zwzw)).xy;

    // 24 0x000005A4:: mul_pp r0.w, r1.w, r2.x
    // sig: float1 = float1 * float1
    r0.w = (r1.w * r2.x);

    // 25 0x000005B4:: mul_sat_pp r0.w, r2.y, r0.w
    // sig: float1 = mul_sat(float1, float1)
    r0.w = saturate(r2.y * r0.w);

    // 26 0x000005C4:: lrp_pp r2.xyz, r0.w, r1, r0
    // sig: float3 = __asm_lerp(float1, float4, float4)
    r2.xyz = (__asm_lerp(r0.w, r1, r0)).xyz;

    // 27 0x000005D8:: dp3_pp r0.x, r2, c1
    // sig: float1 = dp3(float4)
    r0.x = dot(r2, c1);

    // 28 0x000005E8:: lrp_pp r1.xyz, c27.z, r2, r0.x
    // sig: float3 = __asm_lerp(float1, float4, float1)
    r1.xyz = (__asm_lerp(VignetteAndNoiseParams.z, r2, r0.x)).xyz;

    // 29 0x000005FC:: add_pp r0.xyz, r1, r1
    // sig: float3 = float4 + float4
    r0.xyz = (r1 + r1).xyz;

    // 30 0x0000060C:: log_pp r1.x, r0.x
    // sig: float1 = log(float1)
    r1.x = log(r0.x);

    // 31 0x00000618:: log_pp r1.y, r0.y
    // sig: float1 = log(float1)
    r1.y = log(r0.y);

    // 32 0x00000624:: log_pp r1.z, r0.z
    // sig: float1 = log(float1)
    r1.z = log(r0.z);

    // 33 0x00000630:: mul_pp r0.xyz, r1, c27.w
    // sig: float3 = float4 * float1
    r0.xyz = (r1 * VignetteAndNoiseParams.w).xyz;

    // 34 0x00000640:: exp_pp r1.x, r0.x
    // sig: float1 = exp(float1)
    r1.x = exp(r0.x);

    // 35 0x0000064C:: exp_pp r1.y, r0.y
    // sig: float1 = exp(float1)
    r1.y = exp(r0.y);

    // 36 0x00000658:: exp_pp r1.z, r0.z
    // sig: float1 = exp(float1)
    r1.z = exp(r0.z);

    // 37 0x00000664:: mul_sat_pp r0.xyz, r1, c0.y
    // sig: float3 = mul_sat(float3, float1)
    r0.xyz = (saturate(r1 * c0.y)).xyz;

    // 38 0x00000674:: dp3_pp r0.w, r0, c1
    // sig: float1 = dp3(float4)
    r0.w = dot(r0, c1);

    // 39 0x00000684:: add r1.x, r0.w, -, c37.x
    // sig: float1 = float1 + float1
    r1.x = (r0.w + -NonGlowColorMult.x);

    // 40 0x00000694:: add r1.y, -, r0.w, c37.z
    // sig: float1 = float1 + float1
    r1.y = (-r0.w + NonGlowColorMult.z);

    // 41 0x000006A4:: add r0.w, -, r0.w, c36.x
    // sig: float1 = float1 + float1
    r0.w = (-r0.w + LowSpecColorMultiplier.x);

    // 42 0x000006B4:: mul_sat_pp r0.w, r0.w, c36.z
    // sig: float1 = mul_sat(float1, float1)
    r0.w = saturate(r0.w * LowSpecColorMultiplier.z);

    // 43 0x000006C4:: mul_sat_pp r1.xy, r1, c37.ywzw
    // sig: float2 = mul_sat(float2, float1)
    r1.xy = (saturate(r1 * NonGlowColorMult.ywzw)).xy;

    // 44 0x000006D4:: mul_pp r1.x, r1.y, r1.x
    // sig: float1 = float1 * float1
    r1.x = (r1.y * r1.x);

    // 45 0x000006E4:: mul_sat r1.x, r1.x, c36.y
    // sig: float1 = mul_sat(float1, float1)
    r1.x = saturate(r1.x * LowSpecColorMultiplier.y);

    // 46 0x000006F4:: texld_pp r2, v0, s6
    // sig: float4 = tex2D(sampler2D, float2)
    r2 = tex2D(MaskTexture, v0.xy);

    // 46 0x00000704:: add_pp r1.y, -, r2.x, c0.z
    // sig: float1 = float1 + float1
    r1.y = (-r2.x + c0.z);

    // 47 0x00000714:: mul r1.x, r1.y, r1.x
    // sig: float1 = float1 * float1
    r1.x = (r1.y * r1.x);

    // 48 0x00000724:: texld_pp r2, v3, s5
    // sig: float4 = tex2D(sampler2D, float2)
    r2 = tex2D(CloudTexture, v3.xy);

    // 48 0x00000734:: texld_pp r3, v4, s5
    // sig: float4 = tex2D(sampler2D, float2)
    r3 = tex2D(CloudTexture, v4.xy);

    // 48 0x00000744:: lrp_pp r1.yz, c38.x, r2.xxww, r3.xxww
    // sig: float2 = __asm_lerp(float1, float4, float4)
    r1.yz = (__asm_lerp(CustomParams0.x, r2.xxww, r3.xxww)).yz;

    // 49 0x00000758:: lrp_pp r2.x, r0.w, r1.z, r1.y
    // sig: float1 = __asm_lerp(float1, float1, float1)
    r2.x = (__asm_lerp(r0.w, r1.z, r1.y));

    // 50 0x0000076C:: lrp_pp r3.xyz, r1.x, r2.x, r0
    // sig: float3 = __asm_lerp(float1, float1, float4)
    r3.xyz = (__asm_lerp(r1.x, r2.x, r0)).xyz;

    // 51 0x00000780:: mul_pp r0.xyz, r3, v2
    // sig: float3 = float4 * float4
    r0.xyz = (r3 * v2).xyz;

    // 52 0x00000790:: dp2add_pp r0.w, v1, v1, c39.x
    // sig: float1 = dp2add(float2, float2, float1)
    r0.w = dot(v1, v1) + CustomParams1.x;

    // 54 0x000007A4:: mad_sat_pp r0.w, r0.w, c27.x, c27.y
    // sig: float1 = mad_sat(float1, float1, float1)
    r0.w = saturate(r0.w * VignetteAndNoiseParams.x + VignetteAndNoiseParams.y);

    // 55 0x000007B8:: mul_pp r0.w, r0.w, r0.w
    // sig: float1 = float1 * float1
    r0.w = (r0.w * r0.w);

    // 56 0x000007C8:: mul_pp r0.xyz, r0.w, r0
    // sig: float3 = float1 * float4
    r0.xyz = (r0.w * r0).xyz;

    // 57 0x000007D8:: dp3_pp oC0.w, r0, c1
    // sig: float1 = dp3(float4)
    oC0.w = dot(r0, c1);

    // approximately 69 instruction slots used (10 texture, 59 arithmetic)
    // 58 0x000007E8:: mov_pp oC0.xyz, r0
    // sig: half3 = float4
    oC0.xyz = (r0).xyz;

    return oC0;  // Return the final result
}