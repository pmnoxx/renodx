name: Auto Release on Upstream Tag

on:
  schedule:
    # Check for new upstream tags every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      upstream_tag:
        description: 'Specific upstream tag to build (optional)'
        required: false
        type: string

jobs:
  check-upstream:
    runs-on: ubuntu-latest
    outputs:
      new-tag: ${{ steps.check.outputs.new-tag }}
      should-build: ${{ steps.check.outputs.should-build }}
    steps:
      - name: Check for new upstream tags
        id: check
        run: |
          # Get the latest tag from upstream ReShade repository
          LATEST_UPSTREAM_TAG=$(curl -s https://api.github.com/repos/crosire/reshade/releases/latest | jq -r '.tag_name')
          echo "Latest upstream tag: $LATEST_UPSTREAM_TAG"

          # Check if this tag already exists in our repository
          if git ls-remote --tags origin | grep -q "refs/tags/$LATEST_UPSTREAM_TAG"; then
            echo "Tag $LATEST_UPSTREAM_TAG already exists in our repository"
            echo "should-build=false" >> $GITHUB_OUTPUT
            echo "new-tag=" >> $GITHUB_OUTPUT
          else
            echo "New tag found: $LATEST_UPSTREAM_TAG"
            echo "should-build=true" >> $GITHUB_OUTPUT
            echo "new-tag=$LATEST_UPSTREAM_TAG" >> $GITHUB_OUTPUT
          fi

  build-and-release:
    needs: check-upstream
    if: needs.check-upstream.outputs.should-build == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: windows-latest
    strategy:
      matrix:
        architecture: [x64, x86]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.7
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set upstream tag
        id: set-tag
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.upstream_tag }}" ]; then
            echo "tag=${{ github.event.inputs.upstream_tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ needs.check-upstream.outputs.new-tag }}" >> $GITHUB_OUTPUT
          fi

      - name: Update ReShade submodule to upstream tag
        run: |
          cd external/reshade
          git fetch --tags
          git checkout ${{ steps.set-tag.outputs.tag }}
          cd ../..
          git add external/reshade
          git commit -m "Update ReShade to ${{ steps.set-tag.outputs.tag }}" || echo "No changes to commit"

      - name: Download Slang binaries
        run: |
          curl -L -o slang.zip https://github.com/shader-slang/slang/releases/download/v2025.10.3/slang-2025.10.3-windows-x86_64.zip
          powershell -Command "Expand-Archive -Path slang.zip -DestinationPath slang_temp -Force; if (!(Test-Path -Path .\bin)) { New-Item -ItemType Directory -Path .\bin }; Copy-Item slang_temp\bin\* .\bin -Force; Remove-Item slang_temp -Recurse -Force"

      - name: Configure CMake (${{ matrix.architecture }})
        run: |
          if [ "${{ matrix.architecture }}" == "x64" ]; then
            cmake --preset vs-x64
          else
            cmake --preset vs-x86
          fi

      - name: Build (${{ matrix.architecture }})
        run: |
          if [ "${{ matrix.architecture }}" == "x64" ]; then
            cmake --build --preset vs-x64-release --verbose
          else
            cmake --build --preset vs-x86-release --verbose
          fi

      - name: Collect build artifacts
        id: collect-artifacts
        run: |
          $buildDir = if ("${{ matrix.architecture }}" -eq "x86") { "build32.vs" } else { "build.vs" }
          $configDir = "Release"
          $sourceDir = "$buildDir\$configDir"
          $suffix = if ("${{ matrix.architecture }}" -eq "x86") { ".addon32" } else { ".addon64" }

          # Create artifacts directory
          New-Item -ItemType Directory -Path "artifacts" -Force

          # Copy all addon DLLs
          Get-ChildItem -Path $sourceDir -Filter "*$suffix" | ForEach-Object {
            Copy-Item $_.FullName "artifacts\" -Force
            Write-Host "Copied: $($_.Name)"
          }

          # List all artifacts for the next step
          $artifacts = Get-ChildItem -Path "artifacts" -Filter "*$suffix" | ForEach-Object { $_.Name }
          $artifactsJson = $artifacts | ConvertTo-Json
          echo "artifacts=$artifactsJson" >> $env:GITHUB_OUTPUT
          echo "artifacts-count=$($artifacts.Count)" >> $env:GITHUB_OUTPUT

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: addons-${{ matrix.architecture }}-${{ steps.set-tag.outputs.tag }}
          path: artifacts/
          retention-days: 30

  create-release:
    needs: [check-upstream, build-and-release]
    if: always() && (needs.check-upstream.outputs.should-build == 'true' || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Set tag variable
        id: set-tag
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.upstream_tag }}" ]; then
            echo "tag=${{ github.event.inputs.upstream_tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ needs.check-upstream.outputs.new-tag }}" >> $GITHUB_OUTPUT
          fi

      - name: Create release package
        run: |
          # Create release directory
          mkdir -p release

          # Copy x64 artifacts
          if [ -d "artifacts/addons-x64-${{ steps.set-tag.outputs.tag }}" ]; then
            cp artifacts/addons-x64-${{ steps.set-tag.outputs.tag }}/*.addon64 release/ 2>/dev/null || true
          fi

          # Copy x86 artifacts
          if [ -d "artifacts/addons-x86-${{ steps.set-tag.outputs.tag }}" ]; then
            cp artifacts/addons-x86-${{ steps.set-tag.outputs.tag }}/*.addon32 release/ 2>/dev/null || true
          fi

          # List all files in release
          echo "Release contents:"
          ls -la release/

          # Create a zip file
          cd release
          zip -r ../renodx2-${{ steps.set-tag.outputs.tag }}.zip .
          cd ..

          echo "Created release package: renodx2-${{ steps.set-tag.outputs.tag }}.zip"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.set-tag.outputs.tag }}
          name: "ReNoDX2 ${{ steps.set-tag.outputs.tag }}"
          body: |
            ## ReNoDX2 ${{ steps.set-tag.outputs.tag }}

            This release is automatically built from upstream ReShade tag ${{ steps.set-tag.outputs.tag }}.

            ### Included Addons:
            - **x64 versions** (`.addon64`): For 64-bit games
            - **x86 versions** (`.addon32`): For 32-bit games

            ### Installation:
            1. Download the appropriate addon files for your game
            2. Place them in your ReShade addons directory
            3. Configure ReShade to load the addons

            ### Supported Games:
            - Various games with specific addons (see individual addon files)
            - Universal addon (`_univ`) for general compatibility

            ---
            *This is an automated release. For issues, please report them in the repository.*
          files: renodx2-${{ steps.set-tag.outputs.tag }}.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
