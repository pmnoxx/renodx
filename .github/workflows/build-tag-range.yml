name: Build Tag Range

on:
  workflow_dispatch:
    inputs:
      start_tag:
        description: 'Start tag (e.g., v6.0.0)'
        required: true
        type: string
      end_tag:
        description: 'End tag (e.g., v6.5.1) - leave empty for latest'
        required: false
        type: string
      build_architectures:
        description: 'Architectures to build'
        required: true
        type: choice
        options:
          - both
          - x64-only
          - x86-only
        default: both

jobs:
  get-tag-range:
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.get-tags.outputs.tags }}
      tags-count: ${{ steps.get-tags.outputs.tags-count }}
    steps:
      - name: Get tag range
        id: get-tags
        run: |
          START_TAG="${{ github.event.inputs.start_tag }}"
          END_TAG="${{ github.event.inputs.end_tag }}"
          
          echo "Getting tags from $START_TAG to ${END_TAG:-latest}..."
          
          # Get all tags from upstream ReShade repository
          TAGS=$(curl -s "https://api.github.com/repos/crosire/reshade/tags?per_page=100" | jq -r '.[].name' | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V)
          
          # Filter to range
          if [ -n "$END_TAG" ]; then
            echo "Filtering from $START_TAG to $END_TAG"
            TAGS=$(echo "$TAGS" | awk -v start="$START_TAG" -v end="$END_TAG" 'BEGIN{found=0} {if($0==start) found=1; if($0==end) {if(found) print; exit} if(found) print}')
          else
            echo "Filtering from $START_TAG to latest"
            TAGS=$(echo "$TAGS" | awk -v start="$START_TAG" 'BEGIN{found=0} {if($0==start) found=1; if(found) print}')
          fi
          
          # Convert to JSON array
          TAGS_JSON=$(echo "$TAGS" | jq -R -s 'split("\n")[:-1]')
          
          echo "Found tags in range:"
          echo "$TAGS" | while read tag; do
            echo "  - $tag"
          done
          
          echo "tags=$TAGS_JSON" >> $GITHUB_OUTPUT
          echo "tags-count=$(echo "$TAGS" | wc -l)" >> $GITHUB_OUTPUT

  build-tags:
    needs: get-tag-range
    if: needs.get-tag-range.outputs.tags-count > 0
    runs-on: windows-latest
    strategy:
      matrix:
        tag: ${{ fromJson(needs.get-tag-range.outputs.tags) }}
        architecture: 
          - ${{ github.event.inputs.build_architectures == 'both' && 'x64' || (github.event.inputs.build_architectures == 'x64-only' && 'x64' || 'x86') }}
          - ${{ github.event.inputs.build_architectures == 'both' && 'x86' || null }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.7
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Update ReShade submodule to ${{ matrix.tag }}
        run: |
          cd external/reshade
          git fetch --tags
          git checkout ${{ matrix.tag }}
          cd ../..
          git add external/reshade
          git commit -m "Update ReShade to ${{ matrix.tag }}" || echo "No changes to commit"

      - name: Download Slang binaries
        run: |
          curl -L -o slang.zip https://github.com/shader-slang/slang/releases/download/v2025.10.3/slang-2025.10.3-windows-x86_64.zip
          powershell -Command "Expand-Archive -Path slang.zip -DestinationPath slang_temp -Force; if (!(Test-Path -Path .\bin)) { New-Item -ItemType Directory -Path .\bin }; Copy-Item slang_temp\bin\* .\bin -Force; Remove-Item slang_temp -Recurse -Force"

      - name: Configure CMake (${{ matrix.architecture }})
        run: |
          if [ "${{ matrix.architecture }}" == "x64" ]; then
            cmake --preset vs-x64
          else
            cmake --preset vs-x86
          fi

      - name: Build (${{ matrix.architecture }})
        run: |
          if [ "${{ matrix.architecture }}" == "x64" ]; then
            cmake --build --preset vs-x64-release --verbose
          else
            cmake --build --preset vs-x86-release --verbose
          fi

      - name: Collect build artifacts
        run: |
          $buildDir = if ("${{ matrix.architecture }}" -eq "x86") { "build32.vs" } else { "build.vs" }
          $configDir = "Release"
          $sourceDir = "$buildDir\$configDir"
          $suffix = if ("${{ matrix.architecture }}" -eq "x86") { ".addon32" } else { ".addon64" }
          
          # Create artifacts directory
          New-Item -ItemType Directory -Path "artifacts" -Force
          
          # Copy all addon DLLs
          Get-ChildItem -Path $sourceDir -Filter "*$suffix" | ForEach-Object {
            Copy-Item $_.FullName "artifacts\" -Force
            Write-Host "Copied: $($_.Name)"
          }
          
          # List all artifacts
          Write-Host "Artifacts for ${{ matrix.tag }} (${{ matrix.architecture }}):"
          Get-ChildItem -Path "artifacts" -Filter "*$suffix" | ForEach-Object { Write-Host "  - $($_.Name)" }

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: addons-${{ matrix.architecture }}-${{ matrix.tag }}
          path: artifacts/
          retention-days: 30

  create-releases:
    needs: [get-tag-range, build-tags]
    if: always() && needs.get-tag-range.outputs.tags-count > 0
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tag: ${{ fromJson(needs.get-tag-range.outputs.tags) }}
    
    steps:
      - name: Download artifacts for ${{ matrix.tag }}
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create release package for ${{ matrix.tag }}
        run: |
          # Create release directory
          mkdir -p release
          
          # Copy x64 artifacts
          if [ -d "artifacts/addons-x64-${{ matrix.tag }}" ]; then
            cp artifacts/addons-x64-${{ matrix.tag }}/*.addon64 release/ 2>/dev/null || true
            echo "Added x64 artifacts for ${{ matrix.tag }}"
          fi
          
          # Copy x86 artifacts  
          if [ -d "artifacts/addons-x86-${{ matrix.tag }}" ]; then
            cp artifacts/addons-x86-${{ matrix.tag }}/*.addon32 release/ 2>/dev/null || true
            echo "Added x86 artifacts for ${{ matrix.tag }}"
          fi
          
          # List all files in release
          echo "Release contents for ${{ matrix.tag }}:"
          ls -la release/
          
          # Create a zip file
          cd release
          zip -r ../renodx2-${{ matrix.tag }}.zip .
          cd ..
          
          echo "Created release package: renodx2-${{ matrix.tag }}.zip"

      - name: Create GitHub Release for ${{ matrix.tag }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ matrix.tag }}
          name: "ReNoDX2 ${{ matrix.tag }}"
          body: |
            ## ReNoDX2 ${{ matrix.tag }}
            
            This release is built from upstream ReShade tag ${{ matrix.tag }}.
            
            ### Included Addons:
            - **x64 versions** (`.addon64`): For 64-bit games
            - **x86 versions** (`.addon32`): For 32-bit games
            
            ### Installation:
            1. Download the appropriate addon files for your game
            2. Place them in your ReShade addons directory
            3. Configure ReShade to load the addons
            
            ### Supported Games:
            - Various games with specific addons (see individual addon files)
            - Universal addon (`_univ`) for general compatibility
            
            ---
            *This is an automated release. For issues, please report them in the repository.*
          files: renodx2-${{ matrix.tag }}.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  summary:
    needs: [get-tag-range, build-tags, create-releases]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Build Summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Start tag:** ${{ github.event.inputs.start_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**End tag:** ${{ github.event.inputs.end_tag || 'latest' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tags found:** ${{ needs.get-tag-range.outputs.tags-count }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.get-tag-range.outputs.tags-count }}" -gt 0 ]; then
            echo "**Tags processed:**" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo '${{ needs.get-tag-range.outputs.tags }}' | jq -r '.[]' >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "**No tags found in the specified range**" >> $GITHUB_STEP_SUMMARY
          fi
